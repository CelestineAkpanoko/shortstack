generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageURL    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        String   @default("USER") // Add this field for roles
  classes     Class[]
}

model Class {
  id          String       @id @default(cuid())
  name        String
  emoji       String
  code        String       @unique
  cadence     String?
  day         String?
  time        String?
  grade       String?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  overview    String?
  user        User         @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  enrollments Enrollment[]
  lessonPlans LessonPlan[]
  storeItems  StoreItem[]  @relation("StoreItemToClass")
  students    Student[]
  bills       Bill[]       @relation("BillToClass")

  @@index([userId])
}

model Student {
  id           String            @id @default(cuid())
  firstName    String
  lastName     String
  password     String
  classId      String
  progress     Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  schoolEmail  String            @unique
  profileImage String?
  BankAccount  BankAccount[]
  enrollments  Enrollment[]
  class        Class             @relation(fields: [classId], references: [code], onDelete: Cascade)
  bills        StudentBill[]
  purchases    StudentPurchase[]

  @@index([classId])
  @@index([schoolEmail])
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  enrolled  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

model GenericLessonPlan {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String?
  assignments Assignment[] @relation("GenericLessonPlanAssignments")
  files       File[]       @relation("GenericLessonPlanFiles")
  lessonPlans LessonPlan[] @relation("GenericToUserLessonPlans") // Add this relation
}

model LessonPlan {
  id                  String             @id @default(cuid())
  name                String
  description         String?
  classId             String?         
  class               Class?             @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  status              LessonPlanStatus   @default(DRAFT)
  genericLessonPlanId String?
  genericLessonPlan   GenericLessonPlan? @relation(fields: [genericLessonPlanId], references: [id], onDelete: SetNull, name: "GenericToUserLessonPlans")
  assignments         Assignment[]       @relation("LessonPlanAssignments")
  files               File[]             @relation("LessonPlanFiles")

  @@index([classId])
  @@index([genericLessonPlanId])
}

model File {
  id                String              @id @default(cuid())
  name              String
  url               String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  activity          String?
  classId           String
  fileType          String?
  size              Int?
  lessonPlans       LessonPlan[]        @relation("LessonPlanFiles")
  GenericLessonPlan GenericLessonPlan[] @relation("GenericLessonPlanFiles")
}

model Assignment {
  id                String              @id @default(cuid())
  name              String
  dueDate           DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  activity          String?
  classId           String
  fileType          String
  size              Int
  lessonPlans       LessonPlan[]        @relation("LessonPlanAssignments")
  GenericLessonPlan GenericLessonPlan[] @relation("GenericLessonPlanAssignments")
}

model Bill {
  id          String        @id @default(cuid())
  title       String
  amount      Float
  dueDate     DateTime
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  emoji       String        @default("ðŸ’°")
  frequency   String        @default("ONCE")
  status      String        @default("PENDING")
  students    StudentBill[]
  class       Class[]       @relation("BillToClass")
}

model StudentBill {
  id        String    @id @default(cuid())
  billId    String
  studentId String
  isPaid    Boolean   @default(false)
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bill      Bill      @relation(fields: [billId], references: [id], onDelete: Cascade)
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([billId, studentId])
  @@index([billId])
  @@index([studentId])
}

model StoreItem {
  id          String            @id @default(cuid())
  name        String
  emoji       String
  price       Float
  description String?
  quantity    Int               @default(0)
  isAvailable Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  purchases   StudentPurchase[]
  class       Class[]           @relation("StoreItemToClass")
}

model StudentPurchase {
  id          String         @id @default(cuid())
  itemId      String
  studentId   String
  quantity    Int            @default(1)
  totalPrice  Float
  status      PurchaseStatus @default(PENDING)
  purchasedAt DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  item        StoreItem      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  student     Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([itemId, studentId])
  @@index([itemId])
  @@index([studentId])
}

model BankAccount {
  id                                                      String        @id
  accountNumber                                           String        @unique @db.VarChar(12)
  accountType                                             AccountType
  balance                                                 Float         @default(0)
  studentId                                               String
  createdAt                                               DateTime      @default(now())
  updatedAt                                               DateTime
  Student                                                 Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Transaction_Transaction_accountIdToBankAccount          Transaction[] @relation("Transaction_accountIdToBankAccount")
  Transaction_Transaction_receivingAccountIdToBankAccount Transaction[] @relation("Transaction_receivingAccountIdToBankAccount")

  @@index([studentId])
}

model Transaction {
  id                                                      String          @id
  amount                                                  Float
  description                                             String
  transactionType                                         TransactionType
  accountId                                               String
  receivingAccountId                                      String?
  createdAt                                               DateTime        @default(now())
  BankAccount_Transaction_accountIdToBankAccount          BankAccount     @relation("Transaction_accountIdToBankAccount", fields: [accountId], references: [id], onDelete: Cascade)
  BankAccount_Transaction_receivingAccountIdToBankAccount BankAccount?    @relation("Transaction_receivingAccountIdToBankAccount", fields: [receivingAccountId], references: [id])

  @@index([accountId])
  @@index([receivingAccountId])
}

enum LessonPlanStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PurchaseStatus {
  PENDING
  PAID
  CANCELLED
}

enum BillStatus {
  PENDING
  ACTIVE
  PAID
  CANCELLED
}

enum BillFrequency {
  ONCE
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum AccountType {
  CHECKING
  SAVINGS
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER_IN
  TRANSFER_OUT
}
