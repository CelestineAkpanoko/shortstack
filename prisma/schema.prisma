
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Teacher's login
model User {
  id String @id @default(uuid())
  clerkUserId String @unique
  email String @unique
  name String?
  imageURL String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes Class[]
}

// class


model Class {
  id              String    @id @default(cuid())
  name            String
  emoji           String
  code            String    @unique    // Make sure this is String
  cadence         String?
  day             String?
  time            String?
  grade           String?
  enrollments Enrollment[] // relation to enrollments for many-to-many relationship ( i.e many students can be part of many classes)
  students        Student[] // relation to students
  bills         Bill[]    // relation to bills
  storeItems    StoreItem[] // relation to store items
  userId String
  user User @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade) // relation to teacher
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessonPlans      LessonPlan[] // tie lesson plans to a class

  @@index([userId])
}

model Student {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  schoolEmail String   @unique
  password    String   // Will be hashed before storage
  classId     String
  progress    Int      @default(0)
  enrollments Enrollment[]
  bills       StudentBill[]
  purchases   StudentPurchase[]
  class       Class    @relation(fields: [classId], references: [code], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([classId])
  @@index([schoolEmail])
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  enrolled  Boolean  @default(false)  // becomes true when student joins
  student   Student  @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classId])
}


model LessonPlan {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  classId     String
  class       Class        @relation(fields: [classId], references: [code], onDelete: Cascade)
  files       File[]       @relation("LessonPlanFiles")
  assignments Assignment[] @relation("LessonPlanAssignments")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model File {
  id          String       @id @default(cuid())
  name        String
  fileType    String?
  activity    String?
  size        Int?
  url         String
  classId     String
  lessonPlans LessonPlan[] @relation("LessonPlanFiles")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Assignment {
  id          String       @id @default(cuid())
  name        String
  fileType    String
  activity    String?
  dueDate     DateTime?
  size        Int
  classId     String
  lessonPlans LessonPlan[] @relation("LessonPlanAssignments")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}



//Bill
model Bill {
  id          String      @id @default(cuid())
  title       String
  emoji       String
  amount      Float
  dueDate     DateTime
  description String?
  frequency   BillFrequency
  status      BillStatus  @default(PENDING)
  class       Class[]     
  students    StudentBill[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}



model StudentBill {
  id          String    @id @default(cuid())
  billId      String
  studentId   String
  isPaid      Boolean   @default(false)
  paidAt      DateTime?
  bill        Bill      @relation(fields: [billId], references: [id], onDelete: Cascade)
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([billId, studentId])
  @@index([billId])
  @@index([studentId])
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  emoji       String
  price       Float
  description String?
  quantity    Int       @default(0)
  isAvailable Boolean   @default(true)
  classId     String?
  class       Class?     @relation(fields: [classId], references: [code], onDelete: Cascade)
  purchases   StudentPurchase[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([classId])
}

model StudentPurchase {
  id          String    @id @default(cuid())
  itemId      String
  studentId   String
  quantity    Int       @default(1)
  totalPrice  Float
  status      PurchaseStatus @default(PENDING)
  item        StoreItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  purchasedAt DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([itemId, studentId])
  @@index([itemId])
  @@index([studentId])
}

enum PurchaseStatus {
  PENDING
  PAID
  CANCELLED
}


enum BillStatus {
  PENDING
  ACTIVE
  PAID
  CANCELLED
}
enum BillFrequency {
  ONCE
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}